=CheckRegistration=

We want to achieve some basic goals here:
* Registration can be simple, possible with one class (advanced use may be more complex).
* On-the-fly registration and removal of checks.
* Check types also have to be as flexible (register, remove, use the same type but rule take priority over another available implementation).
* Cross-check data access and compatibility aspects are important (e.g. possibility to relate to other checks for listener processing order).
* Checks can at least somehow query if their dependencies are present (data sources, events, packets, other checks, similar).

Extended goals can be:
* Some dependency / factory management is provided, so checks and components can get added / removed as available/needed.

----

Results from the first session:
* CheckType is a class, returned by a registry to identify a check, depict hierarchy, permission string, used for storing data by check types.


Typical problem:
* A check is to be registered, i.e. a CheckType and listeners, logging / configuration etc. have to be linked.
* At the moment of the registration it is not certain that the dependencies are present (e.g. a specific ListenerRegistry).
* If we allow "might not be present", then we need the checks to be added as a factory-like context-object which is processed in post-enable (or after if reload it is determined what to actually register).
* If we demand dependencies to be present at the point of adding a check, then we can't have on-demand services.

Maybe possible solution:
* Demand all dependencies to be present at the moment of adding a check, but allow on-demand-factories.
* On-demand components can then be created if needed, so a check isAvailable(XyZaBc.class) would also check the factories.

Remaining question:
* Is there a use-case for the need of 1. gather dependencies and factories 2. do the registration delayed in one go ?
** Replacing an already present check (which has other components depending on it). Implications for configuration reading for instance.
